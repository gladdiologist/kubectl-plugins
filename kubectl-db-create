#!/bin/bash

NAMESPACE=backend
DB=""
DB_USER=""
DB_PWD=""

usage() {                                      # Function: Print a help message.
  echo "Usage: $0 [ -n NAMESPACE ] -d DB [ -u USER ] [ -p PASSWORD ]" 1>&2
}
exit_abnormal() {                              # Function: Exit with error.
  usage
  exit 1
}
exit_no_pxc() {
  echo "No percona xtradb cluster is running...run kubectl pxc create"
  exit 1
}
random_password() {
  DB_PWD=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;)
}

while getopts ":n:d:" options; do
  case "${options}" in
    n)
      NAMESPACE=${OPTARG}
      ;;
    d)
      DB=$(echo ${OPTARG} | sed -e s/-/_/g)
      SECRET=$(echo ${OPTARG} | sed -e s/_/-/g)
      ;;
    u)
      DB_USER=${OPTARG}
      ;;
    p)
      DB_PWD=${OPTARG}
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument."
      exit_abnormal
      ;;
    *)
      exit_abnormal
      ;;
  esac
done

PXC=$(kubectl get pxc cluster1 -n backend -o name 2> /dev/null)

[ -z "$PXC" ] && exit_no_pxc

[ -z "$DB" ] && exit_abnormal

[ -z "$DB_USER" ] && DB_USER="$DB"

[ -z "$DB_PWD" ] && random_password

IFS='' read -r -d '' MY_CNF <<EOF
[client]
user=$DB_USER
password=$DB_PWD
database=$DB
host=cluster1-haproxy.$NAMESPACE
EOF

kubectl create secret generic -n $NAMESPACE $SECRET --from-literal=my.cnf="$MY_CNF" && \
kubectl label secret -n $NAMESPACE $SECRET service=mysql plan=local broker=pxc component=service name=$DB
echo "creating $DB database..."
MYSQL_PWD=$(secret=$(kubectl get pxc cluster1 -n "$NAMESPACE" -o=jsonpath="{.spec.secretsName}") && kubectl get secret -n "$NAMESPACE" $secret -o=jsonpath={.data.root} | base64 -d) && \
MYSQL_HOST="cluster1-haproxy.$NAMESPACE" && \
cat <<END | mysql -h$MYSQL_HOST -p$MYSQL_PWD -uroot
CREATE DATABASE IF NOT EXISTS $DB;
CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PWD';
GRANT ALL PRIVILEGES ON $DB.* TO '$DB_USER'@'%';
FLUSH PRIVILEGES;
END
