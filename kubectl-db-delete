#!/bin/bash

NAMESPACE=backend
DB=""

usage() {                                      # Function: Print a help message.
  echo "Usage: $0 [ -n NAMESPACE ] -d DB" 1>&2
}
exit_abnormal() {                              # Function: Exit with error.
  usage
  exit 1
}

while getopts ":n:d:" options; do
  case "${options}" in
    n)
      NAMESPACE=${OPTARG}
      ;;
    d)
      DB=$(echo ${OPTARG} | sed -e s/-/_/g)
      SECRET=$(echo ${OPTARG} | sed -e s/_/-/g)
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument."
      exit_abnormal
      ;;
    *)
      exit_abnormal
      ;;
  esac
done


[ -z "$DB" ] && exit_abnormal

echo "searching binding for $DB..."
DROP_USER=$(kubectl get secret -A -l instance=$DB --no-headers -o custom-columns="NAME:.metadata.labels.app" | xargs -I {} echo "DROP USER IF EXISTS '{}'@'%';")
echo "deleting secrets..."
kubectl delete secret -A -l instance=$DB
echo "deleting $DB database..."
MYSQL_PWD=$(secret=$(kubectl get pxc cluster1 -n "$NAMESPACE" -o=jsonpath="{.spec.secretsName}") && kubectl get secret -n "$NAMESPACE" $secret -o=jsonpath={.data.root} | base64 -d) && \
MYSQL_HOST="cluster1-haproxy.$NAMESPACE" && \
cat <<END | mysql -h$MYSQL_HOST -p$MYSQL_PWD -uroot
$DROP_USER
DROP USER IF EXISTS '$DB'@'%';
DROP DATABASE IF EXISTS $DB;
END
echo "deleting secret $SECRET..."
kubectl delete secret -n $NAMESPACE $SECRET
